# 1
# Model Technology ModelSim SE vlog 6.6d Compiler 2010.11 Nov  1 2010
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling package instr_register_test_sv_unit
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling interface tb_ifc
# -- Compiling module top
# 
# Top level modules:
# 	top
# vsim +notimingchecks +nowarnTSCALE -sva -nocoverage -quiet -sv_seed 2222 -novopt top 
# Refreshing D:\FACULTATE\ANUL4_SEM2\TSC\TSC\Lab\sim\work.instr_register_pkg
# Refreshing D:\FACULTATE\ANUL4_SEM2\TSC\TSC\Lab\sim\work.top
# Refreshing D:\FACULTATE\ANUL4_SEM2\TSC\TSC\Lab\sim\work.tb_ifc
# Refreshing D:\FACULTATE\ANUL4_SEM2\TSC\TSC\Lab\sim\work.instr_register_test_sv_unit
# Refreshing D:\FACULTATE\ANUL4_SEM2\TSC\TSC\Lab\sim\work.instr_register_test
# Refreshing D:\FACULTATE\ANUL4_SEM2\TSC\TSC\Lab\sim\work.instr_register
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(28): Clocking block output #parent#.Laborator2_new.cb.opcode is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(17): Clocking block output #parent#.Laborator2_new.cb.operand_a is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(23): Clocking block output #parent#.Laborator2_new.cb.operand_b is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(28): Clocking block output #parent#.Laborator2_new.cb.opcode is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(17): Clocking block output #parent#.Laborator2_new.cb.operand_a is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(23): Clocking block output #parent#.Laborator2_new.cb.operand_b is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(122): Clocking block output Laborator2_new.cb.opcode is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(123): Clocking block output Laborator2_new.cb.operand_a is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(124): Clocking block output Laborator2_new.cb.operand_b is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(121): Clocking block output Laborator2_new.cb.write_pointer is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(130): Clocking block output Laborator2_new.cb.read_pointer is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Error: (vish-4014) No objects found matching '/top/test/seed'.
# Executing ONERROR command at macro ./wave.do line 3
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ************************FIRST HEADER***********************
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 0
# 
#   Time =                   20ns
# Writing to register location 1: 
#   opcode = 2 (PASSB)
#   operand_a = 4
#   operand_b = 11
# 
#   Time =                   30ns
# Writing to register location 2: 
#   opcode = 0 (ZERO)
#   operand_a = 13
#   operand_b = 7
# 
#   Time =                   40ns
# Writing to register location 3: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = 12
# 
#   Time =                   50ns
# Writing to register location 4: 
#   opcode = 5 (MULT)
#   operand_a = 12
#   operand_b = 11
# 
#   Time =                   60ns
# Writing to register location 5: 
#   opcode = 1 (PASSA)
#   operand_a = 13
#   operand_b = 2
# 
#   Time =                   70ns
# Writing to register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 14
#   operand_b = 14
# 
#   Time =                   80ns
# Writing to register location 7: 
#   opcode = 4 (SUB)
#   operand_a = 1
#   operand_b = 15
# 
#   Time =                   90ns
# Writing to register location 8: 
#   opcode = 3 (ADD)
#   operand_a = 1
#   operand_b = 15
# 
#   Time =                  100ns
# Writing to register location 9: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 7
# 
#   Time =                  110ns
# Writing to register location 10: 
#   opcode = 1 (PASSA)
#   operand_a = 0
#   operand_b = 4
# 
#   Time =                  120ns
# Writing to register location 11: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 1
# 
#   Time =                  130ns
# Writing to register location 12: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 2
# 
#   Time =                  140ns
# Writing to register location 13: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 14
# 
#   Time =                  150ns
# Writing to register location 14: 
#   opcode = 1 (PASSA)
#   operand_a = 11
#   operand_b = 0
# 
#   Time =                  160ns
# Writing to register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 7
#   operand_b = 4
# 
#   Time =                  170ns
# Writing to register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 2
#   operand_b = 13
# 
#   Time =                  180ns
# Writing to register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 2
#   operand_b = 15
# 
#   Time =                  190ns
# Writing to register location 18: 
#   opcode = 6 (DIV)
#   operand_a = 0
#   operand_b = 11
# 
#   Time =                  200ns
# Writing to register location 19: 
#   opcode = 0 (ZERO)
#   operand_a = 4
#   operand_b = 14
# 
#   Time =                  210ns
# Writing to register location 20: 
#   opcode = 5 (MULT)
#   operand_a = 9
#   operand_b = 6
# 
#   Time =                  220ns
# Writing to register location 21: 
#   opcode = 1 (PASSA)
#   operand_a = 9
#   operand_b = 14
# 
#   Time =                  230ns
# Writing to register location 22: 
#   opcode = 0 (ZERO)
#   operand_a = 13
#   operand_b = 0
# 
#   Time =                  240ns
# Writing to register location 23: 
#   opcode = 7 (MOD)
#   operand_a = 15
#   operand_b = 13
# 
#   Time =                  250ns
# Writing to register location 24: 
#   opcode = 4 (SUB)
#   operand_a = 6
#   operand_b = 2
# 
#   Time =                  260ns
# Writing to register location 25: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 1
# 
#   Time =                  270ns
# Writing to register location 26: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 7
# 
#   Time =                  280ns
# Writing to register location 27: 
#   opcode = 2 (PASSB)
#   operand_a = 10
#   operand_b = 3
# 
#   Time =                  290ns
# Writing to register location 28: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 3
# 
#   Time =                  300ns
# Writing to register location 29: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 14
# 
#   Time =                  310ns
# Writing to register location 30: 
#   opcode = 7 (MOD)
#   operand_a = 6
#   operand_b = 5
# 
#   Time =                  320ns
# Writing to register location 31: 
#   opcode = 6 (DIV)
#   operand_a = 7
#   operand_b = 4
# 
#   Time =                  330ns
# Writing to register location 0: 
#   opcode = 5 (MULT)
#   operand_a = 14
#   operand_b = 11
# 
#   Time =                  340ns
# Writing to register location 1: 
#   opcode = 4 (SUB)
#   operand_a = 15
#   operand_b = 11
# 
#   Time =                  350ns
# Writing to register location 2: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 11
# 
#   Time =                  360ns
# Writing to register location 3: 
#   opcode = 7 (MOD)
#   operand_a = 7
#   operand_b = 1
# 
#   Time =                  370ns
# Writing to register location 4: 
#   opcode = 3 (ADD)
#   operand_a = 13
#   operand_b = 5
# 
#   Time =                  380ns
# Writing to register location 5: 
#   opcode = 3 (ADD)
#   operand_a = 1
#   operand_b = 8
# 
#   Time =                  390ns
# Writing to register location 6: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 3
# 
#   Time =                  400ns
# Writing to register location 7: 
#   opcode = 5 (MULT)
#   operand_a = 10
#   operand_b = 0
# 
#   Time =                  410ns
# Writing to register location 8: 
#   opcode = 6 (DIV)
#   operand_a = 9
#   operand_b = 14
# 
#   Time =                  420ns
# Writing to register location 9: 
#   opcode = 2 (PASSB)
#   operand_a = 4
#   operand_b = 7
# 
#   Time =                  430ns
# Writing to register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 14
#   operand_b = 3
# 
#   Time =                  440ns
# Writing to register location 11: 
#   opcode = 2 (PASSB)
#   operand_a = 8
#   operand_b = 2
# 
#   Time =                  450ns
# Writing to register location 12: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 10
# 
#   Time =                  460ns
# Writing to register location 13: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 2
# 
#   Time =                  470ns
# Writing to register location 14: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 6
# 
#   Time =                  480ns
# Writing to register location 15: 
#   opcode = 2 (PASSB)
#   operand_a = 7
#   operand_b = 9
# 
#   Time =                  490ns
# Writing to register location 16: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
# 
#   Time =                  500ns
# Writing to register location 17: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 12
# 
#   Time =                  510ns
# Writing to register location 18: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 11
# 
#   Time =                  520ns
# Writing to register location 19: 
#   opcode = 1 (PASSA)
#   operand_a = 6
#   operand_b = 14
# 
#   Time =                  530ns
# Writing to register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 8
#   operand_b = 3
# 
#   Time =                  540ns
# Writing to register location 21: 
#   opcode = 6 (DIV)
#   operand_a = 1
#   operand_b = 7
# 
#   Time =                  550ns
# Writing to register location 22: 
#   opcode = 4 (SUB)
#   operand_a = 2
#   operand_b = 1
# 
#   Time =                  560ns
# Writing to register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 10
# 
#   Time =                  570ns
# Writing to register location 24: 
#   opcode = 3 (ADD)
#   operand_a = 2
#   operand_b = 7
# 
#   Time =                  580ns
# Writing to register location 25: 
#   opcode = 4 (SUB)
#   operand_a = 12
#   operand_b = 8
# 
#   Time =                  590ns
# Writing to register location 26: 
#   opcode = 3 (ADD)
#   operand_a = 2
#   operand_b = 7
# 
#   Time =                  600ns
# Writing to register location 27: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 1
# 
#   Time =                  610ns
# Writing to register location 28: 
#   opcode = 0 (ZERO)
#   operand_a = 2
#   operand_b = 2
# 
#   Time =                  620ns
# Writing to register location 29: 
#   opcode = 7 (MOD)
#   operand_a = 15
#   operand_b = 9
# 
#   Time =                  630ns
# Writing to register location 30: 
#   opcode = 5 (MULT)
#   operand_a = 14
#   operand_b = 3
# 
#   Time =                  640ns
# Writing to register location 31: 
#   opcode = 1 (PASSA)
#   operand_a = 5
#   operand_b = 3
# 
#   Time =                  650ns
# Writing to register location 0: 
#   opcode = 6 (DIV)
#   operand_a = 4
#   operand_b = 7
# 
#   Time =                  660ns
# Writing to register location 1: 
#   opcode = 3 (ADD)
#   operand_a = 4
#   operand_b = 0
# 
#   Time =                  670ns
# Writing to register location 2: 
#   opcode = 6 (DIV)
#   operand_a = 11
#   operand_b = 12
# 
#   Time =                  680ns
# Writing to register location 3: 
#   opcode = 5 (MULT)
#   operand_a = 14
#   operand_b = 12
# 
#   Time =                  690ns
# Writing to register location 4: 
#   opcode = 5 (MULT)
#   operand_a = 8
#   operand_b = 14
# 
#   Time =                  700ns
# Writing to register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = 5
#   operand_b = 10
# 
#   Time =                  710ns
# Writing to register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 3
# 
#   Time =                  720ns
# Writing to register location 7: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 15
# 
#   Time =                  730ns
# Writing to register location 8: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 13
# 
#   Time =                  740ns
# Writing to register location 9: 
#   opcode = 3 (ADD)
#   operand_a = 1
#   operand_b = 3
# 
#   Time =                  750ns
# Writing to register location 10: 
#   opcode = 2 (PASSB)
#   operand_a = 2
#   operand_b = 8
# 
#   Time =                  760ns
# Writing to register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 14
#   operand_b = 6
# 
#   Time =                  770ns
# Writing to register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 9
# 
#   Time =                  780ns
# Writing to register location 13: 
#   opcode = 5 (MULT)
#   operand_a = 10
#   operand_b = 3
# 
#   Time =                  790ns
# Writing to register location 14: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 12
# 
#   Time =                  800ns
# Writing to register location 15: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 10
# 
#   Time =                  810ns
# Writing to register location 16: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 1
# 
#   Time =                  820ns
# Writing to register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 14
# 
#   Time =                  830ns
# Writing to register location 18: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = 5
# 
#   Time =                  840ns
# Writing to register location 19: 
#   opcode = 4 (SUB)
#   operand_a = 4
#   operand_b = 7
# 
#   Time =                  850ns
# Writing to register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 5
#   operand_b = 15
# 
#   Time =                  860ns
# Writing to register location 21: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 11
# 
#   Time =                  870ns
# Writing to register location 22: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 9
# 
#   Time =                  880ns
# Writing to register location 23: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 11
# 
#   Time =                  890ns
# Writing to register location 24: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 8
# 
#   Time =                  900ns
# Writing to register location 25: 
#   opcode = 4 (SUB)
#   operand_a = 1
#   operand_b = 10
# 
#   Time =                  910ns
# Writing to register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 3
# 
#   Time =                  920ns
# Writing to register location 27: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 7
# 
#   Time =                  930ns
# Writing to register location 28: 
#   opcode = 7 (MOD)
#   operand_a = 5
#   operand_b = 4
# 
#   Time =                  940ns
# Writing to register location 29: 
#   opcode = 2 (PASSB)
#   operand_a = 6
#   operand_b = 9
# 
#   Time =                  950ns
# Writing to register location 30: 
#   opcode = 7 (MOD)
#   operand_a = 7
#   operand_b = 9
# 
#   Time =                  960ns
# Writing to register location 31: 
#   opcode = 7 (MOD)
#   operand_a = 7
#   operand_b = 0
# 
#   Time =                  970ns
# Writing to register location 0: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 4
# 
#   Time =                  980ns
# Writing to register location 1: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 9
# 
#   Time =                  990ns
# Writing to register location 2: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 8
# 
#   Time =                 1000ns
# Writing to register location 3: 
#   opcode = 2 (PASSB)
#   operand_a = 10
#   operand_b = 10
# 
#   Time =                 1010ns
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 4
# 
#   Result = 11
# 
#   Time =                  1025ns
# Read from register location 1: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 9
# 
#   Result = 1
# 
#   Time =                  1035ns
# Read from register location 2: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 8
# 
#   Result = 8
# 
#   Time =                  1045ns
# Read from register location 3: 
#   opcode = 2 (PASSB)
#   operand_a = 10
#   operand_b = 10
# 
#   Result = 10
# 
#   Time =                  1055ns
# Read from register location 4: 
#   opcode = 5 (MULT)
#   operand_a = 8
#   operand_b = 14
# 
#   Result = 112
# 
#   Time =                  1065ns
# Read from register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = 5
#   operand_b = 10
# 
#   Result = 0
# 
#   Time =                  1075ns
# Read from register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 3
# 
#   Result = 10
# 
#   Time =                  1085ns
# Read from register location 7: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 15
# 
#   Result = 0
# 
#   Time =                  1095ns
# Read from register location 8: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 13
# 
#   Result = 4
# 
#   Time =                  1105ns
# Read from register location 9: 
#   opcode = 3 (ADD)
#   operand_a = 1
#   operand_b = 3
# 
#   Result = 4
# 
#   Time =                  1115ns
# Read from register location 10: 
#   opcode = 2 (PASSB)
#   operand_a = 2
#   operand_b = 8
# 
#   Result = 8
# 
#   Time =                  1125ns
# Read from register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 14
#   operand_b = 6
# 
#   Result = 0
# 
#   Time =                  1135ns
# Read from register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 9
# 
#   Result = 0
# 
#   Time =                  1145ns
# Read from register location 13: 
#   opcode = 5 (MULT)
#   operand_a = 10
#   operand_b = 3
# 
#   Result = 30
# 
#   Time =                  1155ns
# Read from register location 14: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 12
# 
#   Result = 12
# 
#   Time =                  1165ns
# Read from register location 15: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 10
# 
#   Result = 10
# 
#   Time =                  1175ns
# Read from register location 16: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 1
# 
#   Result = 0
# 
#   Time =                  1185ns
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 14
# 
#   Result = 0
# 
#   Time =                  1195ns
# Read from register location 18: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = 5
# 
#   Result = 2
# 
#   Time =                  1205ns
# Read from register location 19: 
#   opcode = 4 (SUB)
#   operand_a = 4
#   operand_b = 7
# 
#   Result = -3
# 
#   Time =                  1215ns
# Read from register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 5
#   operand_b = 15
# 
#   Result = 0
# 
#   Time =                  1225ns
# Read from register location 21: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 11
# 
#   Result = 19
# 
#   Time =                  1235ns
# Read from register location 22: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 9
# 
#   Result = 0
# 
#   Time =                  1245ns
# Read from register location 23: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 11
# 
#   Result = 1
# 
#   Time =                  1255ns
# Read from register location 24: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 8
# 
#   Result = 1
# 
#   Time =                  1265ns
# Read from register location 25: 
#   opcode = 4 (SUB)
#   operand_a = 1
#   operand_b = 10
# 
#   Result = -9
# 
#   Time =                  1275ns
# Read from register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 3
# 
#   Result = 10
# 
#   Time =                  1285ns
# Read from register location 27: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 7
# 
#   Result = 21
# 
#   Time =                  1295ns
# Read from register location 28: 
#   opcode = 7 (MOD)
#   operand_a = 5
#   operand_b = 4
# 
#   Result = 1
# 
#   Time =                  1305ns
# Read from register location 29: 
#   opcode = 2 (PASSB)
#   operand_a = 6
#   operand_b = 9
# 
#   Result = 9
# 
#   Time =                  1315ns
# Read from register location 30: 
#   opcode = 7 (MOD)
#   operand_a = 7
#   operand_b = 9
# 
#   Result = 7
# 
#   Time =                  1325ns
# Read from register location 31: 
#   opcode = 7 (MOD)
#   operand_a = 7
#   operand_b = 0
# 
#   Result = x
# 
#   Time =                  1335ns
# Read from register location 0: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 4
# 
#   Result = 11
# 
#   Time =                  1345ns
# Read from register location 1: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 9
# 
#   Result = 1
# 
#   Time =                  1355ns
# Read from register location 2: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 8
# 
#   Result = 8
# 
#   Time =                  1365ns
# Read from register location 3: 
#   opcode = 2 (PASSB)
#   operand_a = 10
#   operand_b = 10
# 
#   Result = 10
# 
#   Time =                  1375ns
# Read from register location 4: 
#   opcode = 5 (MULT)
#   operand_a = 8
#   operand_b = 14
# 
#   Result = 112
# 
#   Time =                  1385ns
# Read from register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = 5
#   operand_b = 10
# 
#   Result = 0
# 
#   Time =                  1395ns
# Read from register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 3
# 
#   Result = 10
# 
#   Time =                  1405ns
# Read from register location 7: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 15
# 
#   Result = 0
# 
#   Time =                  1415ns
# Read from register location 8: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 13
# 
#   Result = 4
# 
#   Time =                  1425ns
# Read from register location 9: 
#   opcode = 3 (ADD)
#   operand_a = 1
#   operand_b = 3
# 
#   Result = 4
# 
#   Time =                  1435ns
# Read from register location 10: 
#   opcode = 2 (PASSB)
#   operand_a = 2
#   operand_b = 8
# 
#   Result = 8
# 
#   Time =                  1445ns
# Read from register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 14
#   operand_b = 6
# 
#   Result = 0
# 
#   Time =                  1455ns
# Read from register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 9
# 
#   Result = 0
# 
#   Time =                  1465ns
# Read from register location 13: 
#   opcode = 5 (MULT)
#   operand_a = 10
#   operand_b = 3
# 
#   Result = 30
# 
#   Time =                  1475ns
# Read from register location 14: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 12
# 
#   Result = 12
# 
#   Time =                  1485ns
# Read from register location 15: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 10
# 
#   Result = 10
# 
#   Time =                  1495ns
# Read from register location 16: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 1
# 
#   Result = 0
# 
#   Time =                  1505ns
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 14
# 
#   Result = 0
# 
#   Time =                  1515ns
# Read from register location 18: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = 5
# 
#   Result = 2
# 
#   Time =                  1525ns
# Read from register location 19: 
#   opcode = 4 (SUB)
#   operand_a = 4
#   operand_b = 7
# 
#   Result = -3
# 
#   Time =                  1535ns
# Read from register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 5
#   operand_b = 15
# 
#   Result = 0
# 
#   Time =                  1545ns
# Read from register location 21: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 11
# 
#   Result = 19
# 
#   Time =                  1555ns
# Read from register location 22: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 9
# 
#   Result = 0
# 
#   Time =                  1565ns
# Read from register location 23: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 11
# 
#   Result = 1
# 
#   Time =                  1575ns
# Read from register location 24: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 8
# 
#   Result = 1
# 
#   Time =                  1585ns
# Read from register location 25: 
#   opcode = 4 (SUB)
#   operand_a = 1
#   operand_b = 10
# 
#   Result = -9
# 
#   Time =                  1595ns
# Read from register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 3
# 
#   Result = 10
# 
#   Time =                  1605ns
# Read from register location 27: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 7
# 
#   Result = 21
# 
#   Time =                  1615ns
# Read from register location 28: 
#   opcode = 7 (MOD)
#   operand_a = 5
#   operand_b = 4
# 
#   Result = 1
# 
#   Time =                  1625ns
# Read from register location 29: 
#   opcode = 2 (PASSB)
#   operand_a = 6
#   operand_b = 9
# 
#   Result = 9
# 
#   Time =                  1635ns
# Read from register location 30: 
#   opcode = 7 (MOD)
#   operand_a = 7
#   operand_b = 9
# 
#   Result = 7
# 
#   Time =                  1645ns
# Read from register location 31: 
#   opcode = 7 (MOD)
#   operand_a = 7
#   operand_b = 0
# 
#   Result = x
# 
#   Time =                  1655ns
# Read from register location 0: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 4
# 
#   Result = 11
# 
#   Time =                  1665ns
# Read from register location 1: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 9
# 
#   Result = 1
# 
#   Time =                  1675ns
# Read from register location 2: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 8
# 
#   Result = 8
# 
#   Time =                  1685ns
# Read from register location 3: 
#   opcode = 2 (PASSB)
#   operand_a = 10
#   operand_b = 10
# 
#   Result = 10
# 
#   Time =                  1695ns
# Read from register location 4: 
#   opcode = 5 (MULT)
#   operand_a = 8
#   operand_b = 14
# 
#   Result = 112
# 
#   Time =                  1705ns
# Read from register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = 5
#   operand_b = 10
# 
#   Result = 0
# 
#   Time =                  1715ns
# Read from register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 3
# 
#   Result = 10
# 
#   Time =                  1725ns
# Read from register location 7: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 15
# 
#   Result = 0
# 
#   Time =                  1735ns
# Read from register location 8: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 13
# 
#   Result = 4
# 
#   Time =                  1745ns
# Read from register location 9: 
#   opcode = 3 (ADD)
#   operand_a = 1
#   operand_b = 3
# 
#   Result = 4
# 
#   Time =                  1755ns
# Read from register location 10: 
#   opcode = 2 (PASSB)
#   operand_a = 2
#   operand_b = 8
# 
#   Result = 8
# 
#   Time =                  1765ns
# Read from register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 14
#   operand_b = 6
# 
#   Result = 0
# 
#   Time =                  1775ns
# Read from register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 9
# 
#   Result = 0
# 
#   Time =                  1785ns
# Read from register location 13: 
#   opcode = 5 (MULT)
#   operand_a = 10
#   operand_b = 3
# 
#   Result = 30
# 
#   Time =                  1795ns
# Read from register location 14: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 12
# 
#   Result = 12
# 
#   Time =                  1805ns
# Read from register location 15: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 10
# 
#   Result = 10
# 
#   Time =                  1815ns
# Read from register location 16: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 1
# 
#   Result = 0
# 
#   Time =                  1825ns
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 14
# 
#   Result = 0
# 
#   Time =                  1835ns
# Read from register location 18: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = 5
# 
#   Result = 2
# 
#   Time =                  1845ns
# Read from register location 19: 
#   opcode = 4 (SUB)
#   operand_a = 4
#   operand_b = 7
# 
#   Result = -3
# 
#   Time =                  1855ns
# Read from register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 5
#   operand_b = 15
# 
#   Result = 0
# 
#   Time =                  1865ns
# Read from register location 21: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 11
# 
#   Result = 19
# 
#   Time =                  1875ns
# Read from register location 22: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 9
# 
#   Result = 0
# 
#   Time =                  1885ns
# Read from register location 23: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 11
# 
#   Result = 1
# 
#   Time =                  1895ns
# Read from register location 24: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 8
# 
#   Result = 1
# 
#   Time =                  1905ns
# Read from register location 25: 
#   opcode = 4 (SUB)
#   operand_a = 1
#   operand_b = 10
# 
#   Result = -9
# 
#   Time =                  1915ns
# Read from register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 3
# 
#   Result = 10
# 
#   Time =                  1925ns
# Read from register location 27: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 7
# 
#   Result = 21
# 
#   Time =                  1935ns
# Read from register location 28: 
#   opcode = 7 (MOD)
#   operand_a = 5
#   operand_b = 4
# 
#   Result = 1
# 
#   Time =                  1945ns
# Read from register location 29: 
#   opcode = 2 (PASSB)
#   operand_a = 6
#   operand_b = 9
# 
#   Result = 9
# 
#   Time =                  1955ns
# Read from register location 30: 
#   opcode = 7 (MOD)
#   operand_a = 7
#   operand_b = 9
# 
#   Result = 7
# 
#   Time =                  1965ns
# Read from register location 31: 
#   opcode = 7 (MOD)
#   operand_a = 7
#   operand_b = 0
# 
#   Result = x
# 
#   Time =                  1975ns
# Read from register location 0: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 4
# 
#   Result = 11
# 
#   Time =                  1985ns
# Read from register location 1: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 9
# 
#   Result = 1
# 
#   Time =                  1995ns
# Read from register location 2: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 8
# 
#   Result = 8
# 
#   Time =                  2005ns
# Read from register location 3: 
#   opcode = 2 (PASSB)
#   operand_a = 10
#   operand_b = 10
# 
#   Result = 10
# 
#   Time =                  2015ns
# Read from register location 4: 
#   opcode = 5 (MULT)
#   operand_a = 8
#   operand_b = 14
# 
#   Result = 112
# 
#   Time =                  2025ns
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(98)
#    Time: 2030 ns  Iteration: 2  Instance: /top/test
# 1
# Break in Task run at ../lab01_testbench-interface/instr_register_test.sv line 98
# Simulation Breakpoint: 1
# Break in Task run at ../lab01_testbench-interface/instr_register_test.sv line 98
# MACRO ./run.do PAUSED at line 47
